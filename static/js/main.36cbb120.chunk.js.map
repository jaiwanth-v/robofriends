{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","slice","CardList","robots","map","value","i","user","key","toLowerCase","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.36cbb120.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) =>{\n    const {name, email, id} = props;\n    return(\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 '>\n             <img alt='robot' src= {`https://robohash.org/${id}?size=200x200`} />\n             <div>\n                 <h2 className='f4'>{name.slice(0,20)}</h2>\n                 <p className = 'f6'>{email}</p>\n             </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) =>{\n    return(\n        <div> {\n                robots.map((value, i, user) =>{\n                return <Card id = {value.id} key ={value.id} name = {user[i].name} email = {robots[i].email.toLowerCase()}/>;\n            })}\n        </div>\n    )\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({searchChange})=>{\n    return(\n        <div className = 'pa2'>     \n            <input  \n                type='search' \n                placeholder='search robots'  \n                className='pa3 ba b--green bg-lightest-blue' \n                onChange={searchChange}    \n                />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style = {{overflowY: 'auto', border: '0px solid black', height: '750px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll; ","import React from 'react'\n\nclass ErrorBoundary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n    \n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\nimport  Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport { setSearchField, requestRobots } from '../actions';\nimport { connect } from 'react-redux';\n// import {robots} from '../components/robots'; (for offline apps)\n\nconst mapStateToProps = state => {\n    return{\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots()),\n    }\n}\n\nclass App extends React.Component{\n    constructor(){\n        super();\n        this.state ={\n            robots: [],\n        }\n    }\n\n    componentDidMount(){\n        this.props.onRequestRobots()\n    }\n\n//as soon as the above function runs the function renders again\n\n    render(){\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ? <h1 className = 'tc'>Loading...</h1> :    \n            (\n                <div className='tc'>\n                    <h1 className='f1' >Robofriends</h1>\n                    <SearchBox searchChange = {onSearchChange}/>\n                    <Scroll>    \n                        <ErrorBoundary>\n                            <CardList robots = {filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>    \n            );\n        }\n    }\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING ,\n    REQUEST_ROBOTS_SUCCESS ,\n    REQUEST_ROBOTS_FAILURE, \n} from './constants'\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response =>response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILURE, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING ,\n    REQUEST_ROBOTS_SUCCESS ,\n    REQUEST_ROBOTS_FAILURE, \n} from './constants'\n\n\n\nconst initialStateSearch  = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) =>{\n    switch (action.type) {\n        case  CHANGE_SEARCH_FIELD:\n                return{ ...state,  searchField: action.payload};\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false, \n    error: '',\n    robots: [],\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true}\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false}\n        case REQUEST_ROBOTS_FAILURE:\n            return {...state, error: action.payload, isPending: false}           \n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './containers/App';\nimport {Provider} from 'react-redux'; \nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport './index.css';\nimport thunkMiddleWare from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare ,logger));\n\nReactDOM.render(\n                                <Provider  store = {store}>\n                                    <App/>,\n                                </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}